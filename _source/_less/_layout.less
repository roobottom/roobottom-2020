.wrapper {
  max-width: @break-max-rem;
  margin: 0 auto;
  padding-left: unit(30/@base, rem);
  padding-right: unit(30/@base, rem);
  box-sizing: border-box;
  .break-min({
    padding-left: unit(100/@base, rem);
    padding-right: unit(100/@base, rem);
  });
}

.space(@direction, @distance: 1, @prop: margin) {
  @{prop}-@{direction}: ~"calc(@{distance} * var(--space))";
}

.peek-calc(@distance, @prop) {
  @{prop}: unit(-1 * (@distance * 10) / @base, rem);
  .break-min({
    @{prop}: unit(-1 * (@distance * 30) / @base, rem);
  });
}
.peek(@direction, @distance: 1) when (@direction = both) {
  .peek-calc(@distance, margin-left);
  .peek-calc(@distance, margin-right);
}
.peek(@direction, @distance: 1) when (@direction = start) {
  .peek-calc(@distance, margin-left);
}

.peek(@direction, @distance: 1) when (@direction = end) {
  .peek-calc(@distance, margin-right);
}